cell generate_external_out_message_with_bad_source_address() impure method_id {

  slice ssrc_invalid =  begin_cell()
        .store_uint(2, 2) ;; addr_std$10
        .store_uint(0, 1) ;; anycast nothing
        .store_int(-1, 8) ;; workchain_id: -1
        .store_uint(1, 10)
        .end_cell()
        .begin_parse();

  return begin_cell()
      .store_uint(3, 2) ;;ext_out_msg_info$11
      .store_int(0, 1) ;; src:INVALID
      .store_slice(ssrc_invalid)
      .end_cell();
}

cell generate_external_out_message_with_bad_destination_address() impure method_id {
  slice ssrc = generate_internal_address();

  return begin_cell()
            .store_uint(3, 2) ;;ext_out_msg_info$11
            .store_slice(ssrc) ;; src:MsgAddressInt
            .store_int(0, 1) ;; dest:INVALID
            .end_cell();
}

cell generate_external_in_message_with_bad_source_address() impure method_id {
    slice ssrc_invalid =  begin_cell()
        .store_uint(1, 2) ;; addr_extern$01
        .store_uint(128, 9)
        .store_uint(0, 10)
        .end_cell()
        .begin_parse();

   return begin_cell()
        .store_uint(2, 2) ;;ext_in_msg_info$11
        .store_slice(ssrc_invalid) ;; src:INVALID
        .end_cell();
}

cell generate_external_in_message_with_bad_destination_address() impure method_id {
  slice ssrc = generate_external_address(256);

  return begin_cell()
            .store_uint(2, 2) ;;ext_in_msg_info$10
            .store_slice(ssrc) ;; src:MsgAddressExt
            .store_int(0, 1) ;; dest:INVALID
            .end_cell();
}

cell generate_internal_message_with_bad_grams_data() impure method_id {
    slice ssrc = generate_internal_address();
    slice sdest = generate_internal_address();

    return begin_cell()
            .store_uint(0, 1) ;; int_msg_info$0
            .store_uint(0, 1) ;; ihr_disabled:Bool
            .store_uint(0, 1) ;; bounce:Bool
            .store_uint(0, 1) ;; bounced:Bool
            .store_slice(ssrc) ;; src:MsgAddress
            .store_slice(sdest) ;; dest:MsgAddress
            .store_uint(8, 4)  ;; len of nanograms
            .store_uint(1, 1) ;; INVALID GRAMS amount
            .end_cell();
}

cell generate_internal_message_with_bad_init_state_data() impure method_id {
    slice ssrc = generate_internal_address();
    slice sdest = generate_internal_address();

    builder init_state_with_bad_data = begin_cell().store_uint(0, 1) ;; maybe (##5)
                      .store_uint(1, 1) ;; Maybe TickTock
                      .store_uint(1, 1) ;; bool Tick
                      .store_uint(0, 1) ;; bool Tock
                      .store_uint(1, 1) ;; code: Maybe Cell^
                      .store_uint(1, 1) ;; data: Maybe Cell^
                      .store_uint(1, 1); ;; library: Maybe ^Cell
                      ;; bits for references but no data

    return begin_cell()
            .store_uint(0, 1) ;; int_msg_info$0
            .store_uint(0, 1) ;; ihr_disabled:Bool
            .store_uint(0, 1) ;; bounce:Bool
            .store_uint(0, 1) ;; bounced:Bool
            .store_slice(ssrc) ;; src:MsgAddress
            .store_slice(sdest) ;; dest:MsgAddress
            .store_grams(0) ;;
            .store_dict(null()) ;; extra currencies
            .store_grams(0) ;; ihr_fee
            .store_grams(0) ;; fwd_fee
            .store_uint(1000, 64) ;; created_lt:uint64
            .store_uint(1000, 32) ;; created_at:uint32
            .store_uint(1, 1) ;; Maybe init_state
            .store_uint(1, 1) ;; Either (X ^X) init state
            .store_ref(init_state_with_bad_data.end_cell())
            .store_uint(0, 1) ;; Either (X ^X) body
            .end_cell();
}