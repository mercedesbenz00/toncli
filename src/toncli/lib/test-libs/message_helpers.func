builder store_builder(builder to, builder from) asm "STBR";

cell generate_internal_message(int bounce, int ton_amount, builder payload) impure method_id {
    ;;int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    ;;src:MsgAddressInt dest:MsgAddressInt
    ;;value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
    ;;created_lt:uint64 created_at:uint32 = CommonMsgInfo;

    ;;message$_ {X:Type} info:CommonMsgInfo
    ;;init:(Maybe (Either StateInit ^StateInit))
    ;;body:(Either X ^X) = Message X;

    slice ssrc = generate_internal_address();
    slice sdest = generate_internal_address();

    var msg = begin_cell()
            .store_uint(0, 1) ;; int_msg_info$0
            .store_uint(0, 1) ;; ihr_disabled:Bool
            .store_uint(bounce, 1) ;; bounce:Bool
            .store_uint(0, 1) ;; bounced:Bool
            .store_slice(ssrc) ;; src:MsgAddressInt
            .store_slice(sdest) ;; dest:MsgAddressInt
            .store_grams(ton_amount) ;;
            .store_dict(null()) ;; extra currencies
            .store_grams(0) ;; ihr_fee
            .store_grams(0) ;; fwd_fee
            .store_uint(1000, 64) ;; created_lt:uint64
            .store_uint(1000, 32) ;; created_at:uint32
            .store_uint(0, 1); ;; no init_state
    if(msg.builder_bits() + payload.builder_bits() > 1023) {
      msg = msg.store_uint(1,1) ;; Either ^X
            .store_ref(payload.end_cell());
    } else {
      msg = msg.store_uint(1,1).store_builder(payload);
    }

    return msg.end_cell();
}

cell generate_internal_message_relaxed(int bounce, int ton_amount, builder payload) impure method_id {
    ;;int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    ;;src:MsgAddress dest:MsgAddressInt 
    ;;value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
    ;;created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;

    ;;message$_ {X:Type} info:CommonMsgInfoRelaxed
    ;;init:(Maybe (Either StateInit ^StateInit))
    ;;body:(Either X ^X) = MessageRelaxed X;

    slice ssrc = generate_any_address();
    slice sdest = generate_internal_address();

    var msg = begin_cell()
            .store_uint(0, 1) ;; int_msg_info$0
            .store_uint(0, 1) ;; ihr_disabled:Bool
            .store_uint(bounce, 1) ;; bounce:Bool
            .store_uint(0, 1) ;; bounced:Bool
            .store_slice(ssrc) ;; src:MsgAddressInt
            .store_slice(sdest) ;; dest:MsgAddressInt
            .store_grams(ton_amount) ;;
            .store_dict(null()) ;; extra currencies
            .store_grams(0) ;; ihr_fee
            .store_grams(0) ;; fwd_fee
            .store_uint(1000, 64) ;; created_lt:uint64
            .store_uint(1000, 32) ;; created_at:uint32
            .store_uint(0, 1); ;; no init_state
    if(msg.builder_bits() + payload.builder_bits() > 1023) {
      msg = msg.store_uint(1,1) ;; Either ^X
            .store_ref(payload.end_cell());
    } else {
      msg = msg.store_uint(1,1).store_builder(payload);
    }

    return msg.end_cell();
}

cell generate_external_in_message(int ton_amount, builder payload) impure method_id {
    ;;ext_in_msg_info$10 src:MsgAddressExt dest:MsgAddressInt 
    ;;import_fee:Grams = CommonMsgInfo;

    ;;message$_ {X:Type} info:CommonMsgInfo
    ;;init:(Maybe (Either StateInit ^StateInit))
    ;;body:(Either X ^X) = Message X;

    slice ssrc = generate_external_address(256);
    slice sdest = generate_internal_address();

    var msg = begin_cell()
            .store_uint(2, 2) ;;ext_in_msg_info$10
            .store_slice(ssrc) ;; src:MsgAddressExt
            .store_slice(sdest) ;; dest:MsgAddressExt
            .store_grams(ton_amount) ;;
            .store_uint(1000, 64) ;; created_lt:uint64
            .store_uint(1000, 32) ;; created_at:uint32
            .store_uint(0, 1); ;; no init_state
    if(msg.builder_bits() + payload.builder_bits() > 1023) {
      msg = msg.store_uint(1,1) ;; Either ^X
            .store_ref(payload.end_cell());
    } else {
      msg = msg.store_uint(1,1).store_builder(payload);
    }

    return msg.end_cell();
}

cell generate_external_out_message(int ton_amount, builder payload) impure method_id {
    ;;ext_out_msg_info$11 src:MsgAddressInt dest:MsgAddressExt
    ;;created_lt:uint64 created_at:uint32 = CommonMsgInfo;

    ;;message$_ {X:Type} info:CommonMsgInfo
    ;;init:(Maybe (Either StateInit ^StateInit))
    ;;body:(Either X ^X) = Message X;

    slice ssrc = generate_internal_address();
    slice sdest = generate_external_address(256);

    var msg = begin_cell()
            .store_uint(3, 2) ;;ext_out_msg_info$11
            .store_slice(ssrc) ;; src:MsgAddressExt
            .store_slice(sdest) ;; dest:MsgAddressExt
            .store_grams(ton_amount) ;;
            .store_uint(1000, 64) ;; created_lt:uint64
            .store_uint(1000, 32) ;; created_at:uint32
            .store_uint(0, 1); ;; no init_state
    if(msg.builder_bits() + payload.builder_bits() > 1023) {
      msg = msg.store_uint(1,1) ;; Either ^X
            .store_ref(payload.end_cell());
    } else {
      msg = msg.store_uint(1,1).store_builder(payload);
    }

    return msg.end_cell();
}

cell generate_external_out_message_relaxed(int ton_amount, builder payload) impure method_id {
    ;;ext_out_msg_info$11 src:MsgAddress dest:MsgAddressExt
    ;;created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;

    ;;message$_ {X:Type} info:CommonMsgInfoRelaxed
    ;;init:(Maybe (Either StateInit ^StateInit))
    ;;body:(Either X ^X) = MessageRelaxed X;

    slice ssrc = generate_any_address();
    slice sdest = generate_external_address(256);

    var msg = begin_cell()
            .store_uint(3, 2) ;;ext_out_msg_info$11
            .store_slice(ssrc) ;; src:MsgAddressExt
            .store_slice(sdest) ;; dest:MsgAddressExt
            .store_grams(ton_amount) ;;
            .store_uint(1000, 64) ;; created_lt:uint64
            .store_uint(1000, 32) ;; created_at:uint32
            .store_uint(0, 1); ;; no init_state
    if(msg.builder_bits() + payload.builder_bits() > 1023) {
      msg = msg.store_uint(1,1) ;; Either ^X
            .store_ref(payload.end_cell());
    } else {
      msg = msg.store_uint(1,1).store_builder(payload);
    }

    return msg.end_cell();
}

[int, int, int, slice, slice, int, int, tuple, slice] parse_internal_message(cell message) impure method_id {
    slice cs = message.begin_parse();

    throw_if(error::not_internal_message(), cs~load_uint(1) != 0);

    int ihr_disabled = cs~load_uint(1);
    int bounce = cs~load_uint(1);
    int bounced = cs~load_uint(1);
    slice src = cs~load_msg_addr();
    slice to_address = cs~load_msg_addr();
    int money = cs~load_coins();
    cs~load_dict(); ;; currency collection
    int ihr_fee = cs~load_grams();
    int fwd_fee = cs~load_grams();
    int timestamps = cs~load_uint(96);
    int maybe_init_state = cs~load_uint(1);
    throw_if(error::not_supported_yet(), maybe_init_state);
    tuple init_state = empty_tuple();
    int body_flag = cs~load_uint(1);
    var body = null();
    if (body_flag == 0) {
        ;; load main content from body
        body = cs;
    } else {
        ;; just load ref of body
        body = (cs~load_ref()).begin_parse();
    }

    return [ihr_disabled, bounce, bounced, src, to_address, money, timestamps, init_state, body];
}

[slice, slice, int, tuple, slice] parse_external_message(cell message) impure method_id {
    slice cs = message.begin_parse();
    int msg_info = cs~load_uint(2);

    throw_if(error::not_external_message(), (msg_info != 2) | (msg_info != 3));

    slice src = cs~load_msg_addr();
    slice to_address = cs~load_msg_addr();
    int timestamps = cs~load_uint(96);
    int maybe_init_state = cs~load_uint(1);
    throw_if(error::not_supported_yet(), maybe_init_state);
    tuple init_state = empty_tuple();
    int body_flag = cs~load_uint(1);

    var body = null();
    if (body_flag == 0) {
        ;; load main content from body
        body = cs;
    } else {
        ;; just load ref of body
        body = (cs~load_ref()).begin_parse();
    }

    return [src, to_address, timestamps, init_state, body];
}

